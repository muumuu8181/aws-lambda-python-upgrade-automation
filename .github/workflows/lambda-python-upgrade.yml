name: Lambda Python Version Upgrade & Test

on:
  workflow_dispatch:
    inputs:
      target_python_version:
        description: 'Target Python version (e.g., 3.13, 3.12, 3.11)'
        required: true
        default: '3.13'
      lambda_functions:
        description: 'Lambda functions to upgrade (comma-separated or "all")'
        required: true
        default: 'all'
      test_mode:
        description: 'Test with LocalStack before deploying to AWS'
        type: boolean
        required: true
        default: true
      test_scenario:
        description: 'Test scenario (A_simple, B_conditional, C_complex)'
        required: false
        default: 'A_simple'
        type: choice
        options:
          - 'A_simple'
          - 'B_conditional'
          - 'C_complex'
      environment:
        description: 'Target environment (dev, staging, prod)'
        required: false
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'staging'
          - 'prod'
      step_functions_flow:
        description: 'Step Functions flow type'
        required: false
        default: 'sf1-csv-redshift'
        type: choice
        options:
          - 'sf1-csv-redshift'
          - 'sf2-json-dynamodb'
          - 'sf3-log-athena'
          - 'custom'
      aws_region:
        description: 'AWS Region override'
        required: false
        default: 'ap-northeast-1'
      custom_config:
        description: 'Custom configuration JSON (optional)'
        required: false
        default: '{}'

env:
  PYTHON_VERSION: ${{ github.event.inputs.target_python_version }}
  AWS_REGION: ${{ github.event.inputs.aws_region || 'ap-northeast-1' }}
  LOCALSTACK_ENDPOINT: http://localhost:4566
  TEST_SCENARIO: ${{ github.event.inputs.test_scenario || 'A_simple' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  STEP_FUNCTIONS_FLOW: ${{ github.event.inputs.step_functions_flow || 'sf1-csv-redshift' }}
  CUSTOM_CONFIG: ${{ github.event.inputs.custom_config || '{}' }}

jobs:
  validate-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      lambda-functions: ${{ steps.prepare.outputs.lambda-functions }}
      python-version: ${{ steps.validate.outputs.python-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Python version
        id: validate
        run: |
          PYTHON_VER="${{ github.event.inputs.target_python_version }}"
          if [[ ! "$PYTHON_VER" =~ ^3\.(9|10|11|12|13)$ ]]; then
            echo "Error: Unsupported Python version $PYTHON_VER"
            exit 1
          fi
          echo "python-version=$PYTHON_VER" >> $GITHUB_OUTPUT

      - name: Prepare Lambda function list
        id: prepare
        run: |
          if [[ "${{ github.event.inputs.lambda_functions }}" == "all" ]]; then
            # Extract all Lambda function names from the project
            FUNCTIONS=$(find lambda-functions/ step-functions/ -name "*.py" -exec basename {} .py \; | sort -u | tr '\n' ',' | sed 's/,$//')
          else
            FUNCTIONS="${{ github.event.inputs.lambda_functions }}"
          fi
          echo "lambda-functions=$FUNCTIONS" >> $GITHUB_OUTPUT
          echo "Functions to upgrade: $FUNCTIONS"

  localstack-test:
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    if: github.event.inputs.test_mode == 'true'
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,s3,stepfunctions,glue,redshift
          DEBUG: 1
          LAMBDA_EXECUTOR: docker-reuse
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ needs.validate-and-prepare.outputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.validate-and-prepare.outputs.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 awscli-local localstack

      - name: Wait for LocalStack
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

      - name: Test Lambda function creation with new Python version
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "Testing Lambda creation with Python ${{ needs.validate-and-prepare.outputs.python-version }}"
          echo "Test Scenario: ${{ env.TEST_SCENARIO }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Step Functions Flow: ${{ env.STEP_FUNCTIONS_FLOW }}"
          
          # Create test Lambda based on scenario
          case "${{ env.TEST_SCENARIO }}" in
            "A_simple")
              echo "Creating simple Lambda for scenario A"
              cat > test_lambda.py << 'EOF'
          def lambda_handler(event, context):
              import sys
              return {
                  'statusCode': 200,
                  'body': {
                      'message': 'Simple test completed',
                      'python_version': sys.version,
                      'scenario': 'A_simple',
                      'environment': '${{ env.ENVIRONMENT }}'
                  }
              }
          EOF
              ;;
            "B_conditional")
              echo "Creating conditional Lambda for scenario B"
              cat > test_lambda.py << 'EOF'
          def lambda_handler(event, context):
              import sys
              import json
              
              # Conditional processing
              if event.get('condition') == 'branch_a':
                  result = 'Processed branch A'
              elif event.get('condition') == 'branch_b':
                  result = 'Processed branch B'  
              else:
                  result = 'Default processing'
              
              return {
                  'statusCode': 200,
                  'body': {
                      'message': 'Conditional test completed',
                      'result': result,
                      'python_version': sys.version,
                      'scenario': 'B_conditional',
                      'environment': '${{ env.ENVIRONMENT }}'
                  }
              }
          EOF
              ;;
            "C_complex")
              echo "Creating complex Lambda for scenario C with Glue integration"
              cat > test_lambda.py << 'EOF'
          def lambda_handler(event, context):
              import sys
              import json
              import boto3
              
              # Complex processing with multiple services
              try:
                  # Simulate Glue job interaction
                  glue_response = {"JobRunId": "test-job-run-123"}
                  
                  # Simulate conditional branching
                  processing_type = event.get('processing_type', 'standard')
                  
                  if processing_type == 'batch':
                      result = 'Batch processing initiated'
                  elif processing_type == 'stream':
                      result = 'Stream processing initiated'
                  elif processing_type == 'complex':
                      result = 'Complex multi-stage processing initiated'
                  else:
                      result = 'Standard processing initiated'
                  
                  return {
                      'statusCode': 200,
                      'body': {
                          'message': 'Complex test completed',
                          'result': result,
                          'glue_job': glue_response,
                          'python_version': sys.version,
                          'scenario': 'C_complex',
                          'environment': '${{ env.ENVIRONMENT }}',
                          'step_functions_flow': '${{ env.STEP_FUNCTIONS_FLOW }}'
                      }
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': {
                          'error': str(e),
                          'scenario': 'C_complex'
                      }
                  }
          EOF
              ;;
            *)
              echo "Unknown scenario, using simple Lambda"
              cat > test_lambda.py << 'EOF'
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Default Lambda'}
          EOF
              ;;
          esac
          
          # Package the Lambda
          zip test_lambda.zip test_lambda.py
          
          # Create Lambda function in LocalStack
          awslocal lambda create-function \
            --function-name python-upgrade-test \
            --runtime python${{ needs.validate-and-prepare.outputs.python-version }} \
            --role arn:aws:iam::123456789012:role/lambda-role \
            --handler test_lambda.lambda_handler \
            --zip-file fileb://test_lambda.zip
          
          # Wait for Lambda function to be ready
          echo "Waiting for Lambda function to be ready..."
          sleep 10
          
          # Check Lambda function status
          awslocal lambda get-function --function-name python-upgrade-test
          
          # Test the Lambda function with retry
          echo "Testing Lambda function..."
          for i in {1..3}; do
            if awslocal lambda invoke \
              --function-name python-upgrade-test \
              --payload '{"test": "data"}' \
              response.json; then
              echo "Lambda response:"
              cat response.json
              break
            else
              echo "Attempt $i failed, retrying..."
              sleep 5
            fi
          done

  upgrade-lambda-functions:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, localstack-test]
    if: always() && needs.validate-and-prepare.result == 'success' && (needs.localstack-test.result == 'success' || github.event.inputs.test_mode == 'false')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ needs.validate-and-prepare.outputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.validate-and-prepare.outputs.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Lambda function runtimes
        env:
          FUNCTIONS: ${{ needs.validate-and-prepare.outputs.lambda-functions }}
          TARGET_RUNTIME: python${{ needs.validate-and-prepare.outputs.python-version }}
        run: |
          echo "Updating Lambda functions to $TARGET_RUNTIME"
          echo "Target Environment: ${{ env.ENVIRONMENT }}"
          echo "Test Scenario: ${{ env.TEST_SCENARIO }}"
          
          # Environment-specific function naming
          case "${{ env.ENVIRONMENT }}" in
            "prod")
              FUNCTION_PREFIX="prod-"
              ;;
            "staging") 
              FUNCTION_PREFIX="staging-"
              ;;
            "dev")
              FUNCTION_PREFIX="dev-"
              ;;
            *)
              FUNCTION_PREFIX=""
              ;;
          esac
          
          # Split comma-separated function names
          IFS=',' read -ra FUNC_ARRAY <<< "$FUNCTIONS"
          
          for func in "${FUNC_ARRAY[@]}"; do
            func=$(echo $func | xargs)  # Trim whitespace
            if [[ -z "$func" ]]; then continue; fi
            
            echo "Processing function: $func"
            
            # Check if function exists
            if aws lambda get-function --function-name "$func" >/dev/null 2>&1; then
              echo "Updating runtime for existing function: $func"
              
              aws lambda update-function-configuration \
                --function-name "$func" \
                --runtime "$TARGET_RUNTIME" || {
                echo "Warning: Failed to update $func runtime"
                continue
              }
              
              # Wait for function to be in Active state
              echo "Waiting for $func to be ready..."
              aws lambda wait function-updated --function-name "$func"
              
              echo "Successfully updated $func to $TARGET_RUNTIME"
            else
              echo "Function $func does not exist, skipping..."
            fi
          done

      - name: Test updated functions
        env:
          FUNCTIONS: ${{ needs.validate-and-prepare.outputs.lambda-functions }}
        run: |
          echo "Testing updated Lambda functions"
          
          IFS=',' read -ra FUNC_ARRAY <<< "$FUNCTIONS"
          
          for func in "${FUNC_ARRAY[@]}"; do
            func=$(echo $func | xargs)
            if [[ -z "$func" ]]; then continue; fi
            
            if aws lambda get-function --function-name "$func" >/dev/null 2>&1; then
              echo "Testing function: $func"
              
              # Get function configuration
              aws lambda get-function-configuration --function-name "$func" \
                --query 'Runtime' --output text
              
              # Simple invoke test (if function accepts empty payload)
              aws lambda invoke \
                --function-name "$func" \
                --payload '{}' \
                "/tmp/${func}_response.json" >/dev/null 2>&1 || {
                echo "Warning: Could not invoke $func for testing"
              }
            fi
          done

  update-step-functions:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, upgrade-lambda-functions]
    if: always() && needs.upgrade-lambda-functions.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Glue Job Python version
        run: |
          echo "Updating Glue Job Python versions"
          
          # Update Glue job for CSV to Parquet conversion
          GLUE_JOB="etl-observer-dev-csv-to-parquet"
          
          if aws glue get-job --job-name "$GLUE_JOB" >/dev/null 2>&1; then
            echo "Updating Glue job: $GLUE_JOB"
            
            # Get current job definition
            aws glue get-job --job-name "$GLUE_JOB" > current_job.json
            
            # Update Python version in job definition
            # Note: Glue supports specific Python versions, need to map accordingly
            GLUE_PYTHON_VERSION="3"  # Glue uses "3" for Python 3.x
            if [[ "${{ needs.validate-and-prepare.outputs.python-version }}" == "3.9" ]]; then
              GLUE_PYTHON_VERSION="3.9"
            fi
            
            aws glue update-job \
              --job-name "$GLUE_JOB" \
              --job-update PythonVersion="$GLUE_PYTHON_VERSION" || {
              echo "Warning: Could not update Glue job Python version"
            }
          fi

      - name: Test ETL pipeline
        run: |
          echo "Testing complete ETL pipeline"
          
          # Test Step Functions execution with sample data
          aws stepfunctions start-execution \
            --state-machine-arn "arn:aws:states:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:stateMachine:sf-etl-observer-dev-ingest" \
            --name "python-upgrade-test-$(date +%s)" \
            --input file://tests/sample_input.json || {
            echo "Warning: Could not test Step Functions pipeline"
          }

  generate-report:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, localstack-test, upgrade-lambda-functions, update-step-functions]
    if: always()
    
    steps:
      - name: Generate upgrade report
        run: |
          cat << EOF > upgrade_report.md
          # Lambda Python Upgrade Report
          
          **Date:** $(date)  
          **Target Python Version:** ${{ needs.validate-and-prepare.outputs.python-version }}  
          **Functions:** ${{ needs.validate-and-prepare.outputs.lambda-functions }}  
          **Test Scenario:** ${{ env.TEST_SCENARIO }}  
          **Environment:** ${{ env.ENVIRONMENT }}  
          **Step Functions Flow:** ${{ env.STEP_FUNCTIONS_FLOW }}  
          **AWS Region:** ${{ env.AWS_REGION }}  
          
          ## Test Configuration
          - **LocalStack Testing:** ${{ github.event.inputs.test_mode }}
          - **Custom Config:** ${{ env.CUSTOM_CONFIG }}
          
          ## Results
          
          - **Validation:** ${{ needs.validate-and-prepare.result }}
          - **LocalStack Test:** ${{ needs.localstack-test.result }}
          - **Lambda Upgrade:** ${{ needs.upgrade-lambda-functions.result }}
          - **Step Functions Update:** ${{ needs.update-step-functions.result }}
          
          ## Next Steps
          
          $( if [[ "${{ needs.upgrade-lambda-functions.result }}" == "success" ]]; then
            echo "✅ Lambda functions successfully upgraded to Python ${{ needs.validate-and-prepare.outputs.python-version }}"
            echo "- Monitor functions for any runtime issues"
            echo "- Update dependencies if needed"
          else
            echo "❌ Lambda upgrade failed - check logs for details"
            echo "- Review function compatibility with Python ${{ needs.validate-and-prepare.outputs.python-version }}"
            echo "- Check AWS permissions"
          fi )
          EOF
          
          echo "Upgrade report generated:"
          cat upgrade_report.md

      - name: Upload report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-upgrade-report
          path: upgrade_report.md